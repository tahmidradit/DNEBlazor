@page "/PopulateLead/New"
@page "/PopulateLead/Edit/{Id:int}"
@attribute [Authorize]
@inherits DNEBlazor.Pages.Leads.PopulateLeadModel

<div class="widget-header">
    <div class="row">
        <div class="col-md-4"><a href="/leadsview"><i class="fa fa-arrow-circle-o-left" style="font-size:24px; color:blue"></i></a></div>
        <div class="col-md-4"> 
            @*@if(lead.Id == 0)
             {
                <h2>Add Lead</h2>
            }
            else
            {
                <h2>Edit Lead</h2>
            }*@
             <h2>Populate Lead</h2>
        </div>
        <div class="col-md-4" align="right">
            <EditForm Model="@Lead" OnValidSubmit="SaveAsync">
                <input type="submit" style="width:9rem;" class="btn btn-primary  btn-sm text-white mt-3" value="Save"> &nbsp;
                <button type="button" style="width:9rem;" class="btn btn-light  text-dark btn-sm mt-3" @onclick="(() => Redirect())">Cancel</button>
            </EditForm>
        </div>
    </div>
    <hr />
</div>

<div class="widget-content widget-content-area">
    <EditForm Model="@Lead" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <div class="form-group row mb-4">
            <div class="col-sm-10">
                <div class="form-group row">
                    <div class="col-1">
                        <label class="text-secondary">First Name</label>
                    </div>
                    <div class="col-4">
                        <input type="text" style="background-color: #FAE900;" class="form-control mt-2" @bind="@Lead.FirstName" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-1">
                        <label class="text-secondary">Last Name</label>
                    </div>
                    <div class="col-4">
                        <input type="text" style="background-color: #FAE900;" class="form-control mt-2" @bind="@Lead.LastName" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-1">
                        <label class="text-secondary">Email</label>
                    </div>
                    <div class="col-4">
                        <input type="text" style="background-color: #FAE900;" class="form-control mt-2" @bind="@Lead.Email" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-1">
                        <label class="text-secondary">Phone</label>
                    </div>
                    <div class="col-4">
                        <input type="text" style="background-color: #FAE900;" class="form-control mt-2" @bind="@Lead.Phone" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-1">
                        <label class="text-secondary">Category</label>
                    </div>
                    <div class="col-4">
                        <select class="form-select mt-2" style="background-color: #FAE900;"  @bind="@Lead.CategoryId"> @foreach(var items in Categories) { <option value="@items.Id">@items.Name</option> } </select>
                    </div>
                </div>
            </div>
        </div> 
    </EditForm>
<hr />
</div>

@code {
    //[Inject]
    //protected AuthenticationStateProvider authenticationStateProvider { get; set; }
    //Lead lead = new Lead();
    //List<Category> Categories => iCategory.ToListCategories();
    //[Inject]
    //public NavigationManager navigationManager { get; set; }

    //[Parameter]
    //public string Id { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    var authenticationStateProviderAsync = await authenticationStateProvider.GetAuthenticationStateAsync();
    //    var user = authenticationStateProviderAsync.User.Claims;

    //    lead = new Lead()
    //    {
    //        CreatedByUserId = user.FirstOrDefault().Value,
    //        UpdatedByUserId = user.FirstOrDefault().Value,
    //        DateCreated = DateTime.Now,
    //        DateUpdated = DateTime.Now
    //    };

    //    lead = await iLead.GetLead(int.Parse(Id));
    //}
    //public async Task Save()
    //{
    //    lead = await iLead.Update(lead, authenticationStateProvider);
    //    navigationManager.NavigateTo("/leadsview");
    //}
    
    //public void Redirect()
    //{
    //    navigationManager.NavigateTo("/leadsview");
    //}
    
}

