@page "/categorycomponent"
@using DNEBlazor.Data.Models;
@using DNEBlazor.Repository.Data;
@using DNEBlazor.Service
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@inject IHttpContextAccessor httpContextAccessor;
@inject DNEBlazor.Repository.ICategory iCategory;

<center>
    <h3>Category</h3> <br />
</center>

<div class="row">
    <div class="col-4">
        <div class="card text-white mb-3" style="max-width: 18rem;">
            <div class="card-header bg-info">Save Category</div>
            <div class="card-body">
                @*<form>*@ @*// do not use form tag to stop page reloading//*@
                    <label class="text-secondary">Name</label>
                    <input type="text" class="form-control" style="width:15rem;" @bind="@category.Name" /> <br />
                    @*<label class="text-secondary">Created By</label>*@
                    @*<input type="hidden" class="form-control" style="width:15rem;" @bind="@category.CreatedByUserId" />*@
                    @*<label class="text-secondary">Updated By</label>*@
                    @*<input type="hidden" class="form-control" style="width:15rem;" @bind="@category.UpdatedByUserId" />*@
                    <label class="text-secondary">Date Created</label>
                    <input type="text" class="form-control" style="width:15rem;" @bind="@category.DateCreated" /> <br />
                    <label class="text-secondary">Date Updated</label>
                    <input type="text" class="form-control" style="width:15rem;" @bind="@category.DateUpdated" /> <br />
                    <a class="form-control btn btn-info text-white" @onclick="@(m =>Save())" style="width:15rem;"><i class="fas fa-plus"></i> &nbsp; Save</a>
                @*</form>*@
            </div>
        </div>
    </div>
    <div class="col-8">
        <table class="table table-hover table-bordered table-sm text-center" style="background-color:lightskyblue" width="100%">
            <thead class="table table-primary">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Created By</th>
                    <th>Updated By</th>
                    <th>Date Created</th>
                    <th>Date Updated</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Category category in Categories)
                {
                    <tr>
                        <td>@category.Id</td>
                        <td>@category.Name</td>
                        <td>@category.CreatedByUserId</td>
                        <td>@category.UpdatedByUserId</td>
                        <td>@category.DateCreated</td>
                        <td>@category.DateUpdated</td>
                        <td>
                            <a class="btn btn-dark text-white btn-sm" @onclick="@(m=>PreloadInputFields(@category))"><i class="fas fa-edit"></i> &nbsp; Edit</a>
                            <a class="btn btn-danger text-white btn-sm" @onclick="@(m=>Remove(@category.Id))"><i class="fas fa-trash-alt"></i> &nbsp; Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    [Inject]
    protected AuthenticationStateProvider authenticationStateProvider { get; set; }
    Category category = new Category();
    List<Category> Categories = new List<Category>();
    
    protected override async Task OnInitializedAsync()
    {
        LoadCategories();
        var authenticationStateProviderAsync = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationStateProviderAsync.User.Claims;

        category = new Category()
        {
            CreatedByUserId = user.FirstOrDefault().Value,
            UpdatedByUserId = user.FirstOrDefault().Value  
        };
       
    }

    private void LoadCategories()
    {
        Categories = new List<Category>();
        Categories = iCategory.ToListCategories();
    }

    private void Remove(int Id)
    {
        string delete = iCategory.Delete(Id);
    }

    public void Save()
    {
        if (category.Id == 0)
        {
            category = iCategory.Add(category);
        }
        else
        {
            category = iCategory.Update(category);
        }

        category = new Category();
        LoadCategories();

    }

    private void PreloadInputFields(Category categoryDM)
    {
        category = categoryDM;
    }
}
